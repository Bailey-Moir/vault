/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var f = Object.defineProperty;
var u = Object.getOwnPropertyDescriptor;
var v = Object.getOwnPropertyNames;
var L = Object.prototype.hasOwnProperty;
var M = (t, e) => {
        for (var r in e) f(t, r, {
            get: e[r],
            enumerable: !0
        })
    },
    T = (t, e, r, s) => {
        if (e && typeof e == "object" || typeof e == "function")
            for (let n of v(e)) !L.call(t, n) && n !== r && f(t, n, {
                get: () => e[n],
                enumerable: !(s = u(e, n)) || s.enumerable
            });
        return t
    };
var b = t => T(f({}, "__esModule", {
    value: !0
}), t);
var x = {};
M(x, {
    default: () => o
});
module.exports = b(x);
var h = require("obsidian"),
    o = class extends h.Plugin {
        async onload() {
            this.registerMarkdownPostProcessor((e, r) => {
                let n = setInterval(async () => {
                    let i = e.findAll("svg.svg-icon");
                    i = i.filter(a => {
                        var l;
                        return (l = a.parentElement) == null ? void 0 : l.classList.contains("callout-icon")
                    }), i.forEach(a => {
                        var p, d, E, g;
                        let l = (E = (d = (p = a.parentElement) == null ? void 0 : p.parentElement) == null ? void 0 : d.parentElement) == null ? void 0 : E.getAttr("data-callout");
                        l = l.charAt(0).toUpperCase() + l.slice(1);
                        let c = (g = a.parentElement) == null ? void 0 : g.nextElementSibling;
                        c.innerHTML == l && (c.innerHTML = "");
                        let m = document.createElement("b");
                        m.innerHTML = l + " ", m.style.fontWeight = "600", c.prepend(m), a.remove()
                    })
                }, 20);
                setTimeout(() => {
                    clearInterval(n)
                }, 10e3)
            })
        }
    };
